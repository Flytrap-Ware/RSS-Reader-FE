name: Deploy to Amazon EC2

on:
  push:
    branches: [ "release" ]

env:
  working-directory: .
  AWS_REGION: ap-northeast-2                   
  AWS_SG_NAME: FlytrapDevelopment
  AWS_SG_ID: sg-0895e77b2da12a6c9
  VITE_ENV_PATH: /

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Get Public IP
      id: publicip
      run: |
        response=$(curl -s canhazip.com)
        echo "ip=$response" >> "$GITHUB_OUTPUT"

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18 
    
    - name: Install npm
      run: npm install
      shell: bash

    - name: Create vite .env
      run: touch ${{ env.VITE_ENV_PATH }}
      shell: bash
    - run: echo "${{ secrets.VITE_ENV }}" > ${{ env.VITE_ENV_PATH }}
      shell: bash

    - name: Build npm
      run: npm run build
      shell: bash

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v1
      with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
         aws-region: ${{env.AWS_REGION}}

    - name: 보안 그룹에 Github Actions IP 추가
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.publicip.outputs.ip }}/32

    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -r private_key.pem -o StrictHostKeyChecking=no /dist ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/fe
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}
        rm -f private_key.pem
      

    - name: 보안 그룹에서 Github Actions IP 제거
      run: |
         aws ec2 revoke-security-group-ingress  --group-id ${{ env.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.publicip.outputs.ip }}/32
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
